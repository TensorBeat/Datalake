// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: tensorbeat/datalake.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogicalOperator int32

const (
	LogicalOperator_UNKNOWN_LOGICAL_OPERATOR LogicalOperator = 0
	LogicalOperator_OR                       LogicalOperator = 1
	LogicalOperator_AND                      LogicalOperator = 2
	LogicalOperator_NOT                      LogicalOperator = 3
)

// Enum value maps for LogicalOperator.
var (
	LogicalOperator_name = map[int32]string{
		0: "UNKNOWN_LOGICAL_OPERATOR",
		1: "OR",
		2: "AND",
		3: "NOT",
	}
	LogicalOperator_value = map[string]int32{
		"UNKNOWN_LOGICAL_OPERATOR": 0,
		"OR":                       1,
		"AND":                      2,
		"NOT":                      3,
	}
)

func (x LogicalOperator) Enum() *LogicalOperator {
	p := new(LogicalOperator)
	*p = x
	return p
}

func (x LogicalOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogicalOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorbeat_datalake_proto_enumTypes[0].Descriptor()
}

func (LogicalOperator) Type() protoreflect.EnumType {
	return &file_tensorbeat_datalake_proto_enumTypes[0]
}

func (x LogicalOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogicalOperator.Descriptor instead.
func (LogicalOperator) EnumDescriptor() ([]byte, []int) {
	return file_tensorbeat_datalake_proto_rawDescGZIP(), []int{0}
}

type GetSongsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// Pass in map of tags to be matched on returned songs
	// {
	// "genre": "rock",
	// "genre": "metal",
	// }
	// The tags will be combined using the logical operator:
	// - OR    means songs matching any of the tags will be returned.
	// - AND   means songs matching all of the tags will be returned.
	// - NOT   means songs that dont match any of the tags will be returned.
	//
	// Leaving the map blank will return everything
	Tags     map[string]string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Operator LogicalOperator   `protobuf:"varint,2,opt,name=operator,proto3,enum=tensorbeat.datalake.LogicalOperator" json:"operator,omitempty"`
}

func (x *GetSongsRequest) Reset() {
	*x = GetSongsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorbeat_datalake_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSongsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSongsRequest) ProtoMessage() {}

func (x *GetSongsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorbeat_datalake_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSongsRequest.ProtoReflect.Descriptor instead.
func (*GetSongsRequest) Descriptor() ([]byte, []int) {
	return file_tensorbeat_datalake_proto_rawDescGZIP(), []int{0}
}

func (x *GetSongsRequest) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GetSongsRequest) GetOperator() LogicalOperator {
	if x != nil {
		return x.Operator
	}
	return LogicalOperator_UNKNOWN_LOGICAL_OPERATOR
}

type GetSongsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Songs []*File `protobuf:"bytes,1,rep,name=songs,proto3" json:"songs,omitempty"`
}

func (x *GetSongsResponse) Reset() {
	*x = GetSongsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorbeat_datalake_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSongsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSongsResponse) ProtoMessage() {}

func (x *GetSongsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorbeat_datalake_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSongsResponse.ProtoReflect.Descriptor instead.
func (*GetSongsResponse) Descriptor() ([]byte, []int) {
	return file_tensorbeat_datalake_proto_rawDescGZIP(), []int{1}
}

func (x *GetSongsResponse) GetSongs() []*File {
	if x != nil {
		return x.Songs
	}
	return nil
}

type AddSongsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Songs []*AddFile `protobuf:"bytes,1,rep,name=songs,proto3" json:"songs,omitempty"`
}

func (x *AddSongsRequest) Reset() {
	*x = AddSongsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorbeat_datalake_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSongsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSongsRequest) ProtoMessage() {}

func (x *AddSongsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorbeat_datalake_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSongsRequest.ProtoReflect.Descriptor instead.
func (*AddSongsRequest) Descriptor() ([]byte, []int) {
	return file_tensorbeat_datalake_proto_rawDescGZIP(), []int{2}
}

func (x *AddSongsRequest) GetSongs() []*AddFile {
	if x != nil {
		return x.Songs
	}
	return nil
}

type AddSongsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (x *AddSongsResponse) Reset() {
	*x = AddSongsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorbeat_datalake_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSongsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSongsResponse) ProtoMessage() {}

func (x *AddSongsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorbeat_datalake_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSongsResponse.ProtoReflect.Descriptor instead.
func (*AddSongsResponse) Descriptor() ([]byte, []int) {
	return file_tensorbeat_datalake_proto_rawDescGZIP(), []int{3}
}

func (x *AddSongsResponse) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

type AddTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tags map[string]string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddTagsRequest) Reset() {
	*x = AddTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorbeat_datalake_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTagsRequest) ProtoMessage() {}

func (x *AddTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorbeat_datalake_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTagsRequest.ProtoReflect.Descriptor instead.
func (*AddTagsRequest) Descriptor() ([]byte, []int) {
	return file_tensorbeat_datalake_proto_rawDescGZIP(), []int{4}
}

func (x *AddTagsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddTagsRequest) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type AddTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (x *AddTagsResponse) Reset() {
	*x = AddTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorbeat_datalake_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTagsResponse) ProtoMessage() {}

func (x *AddTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorbeat_datalake_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTagsResponse.ProtoReflect.Descriptor instead.
func (*AddTagsResponse) Descriptor() ([]byte, []int) {
	return file_tensorbeat_datalake_proto_rawDescGZIP(), []int{5}
}

func (x *AddTagsResponse) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

type RemoveTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tags map[string]string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RemoveTagsRequest) Reset() {
	*x = RemoveTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorbeat_datalake_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTagsRequest) ProtoMessage() {}

func (x *RemoveTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorbeat_datalake_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTagsRequest.ProtoReflect.Descriptor instead.
func (*RemoveTagsRequest) Descriptor() ([]byte, []int) {
	return file_tensorbeat_datalake_proto_rawDescGZIP(), []int{6}
}

func (x *RemoveTagsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RemoveTagsRequest) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type RemoveTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (x *RemoveTagsResponse) Reset() {
	*x = RemoveTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorbeat_datalake_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTagsResponse) ProtoMessage() {}

func (x *RemoveTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorbeat_datalake_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTagsResponse.ProtoReflect.Descriptor instead.
func (*RemoveTagsResponse) Descriptor() ([]byte, []int) {
	return file_tensorbeat_datalake_proto_rawDescGZIP(), []int{7}
}

func (x *RemoveTagsResponse) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

var File_tensorbeat_datalake_proto protoreflect.FileDescriptor

var file_tensorbeat_datalake_proto_rawDesc = []byte{
	0x0a, 0x19, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6c, 0x61, 0x6b, 0x65,
	0x1a, 0x17, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd0, 0x01, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x53, 0x6f, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6c, 0x61, 0x6b,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x40, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x41, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x53, 0x6f, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2d, 0x0a, 0x05, 0x73, 0x6f, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x6f, 0x6e, 0x67, 0x73, 0x22,
	0x43, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x53, 0x6f, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x6f, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x73,
	0x6f, 0x6e, 0x67, 0x73, 0x22, 0x32, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x53, 0x6f, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x22, 0x9c, 0x01, 0x0a, 0x0e, 0x41, 0x64, 0x64,
	0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6c, 0x61, 0x6b, 0x65, 0x2e,
	0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37,
	0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x31, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x54, 0x61,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x22, 0xa2, 0x01, 0x0a, 0x11, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x44, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x34, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x66, 0x75, 0x6c, 0x2a, 0x49, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x4f, 0x54, 0x10, 0x03,
	0x32, 0xf8, 0x02, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x6c, 0x61, 0x6b, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6e, 0x67, 0x73,
	0x12, 0x24, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62,
	0x65, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x6f, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a,
	0x08, 0x41, 0x64, 0x64, 0x53, 0x6f, 0x6e, 0x67, 0x73, 0x12, 0x24, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6c, 0x61, 0x6b, 0x65, 0x2e,
	0x41, 0x64, 0x64, 0x53, 0x6f, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x6f, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x23, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62,
	0x65, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0a,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x26, 0x2e, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6c, 0x61, 0x6b, 0x65,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54,
	0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0f, 0x5a, 0x0d, 0x2e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tensorbeat_datalake_proto_rawDescOnce sync.Once
	file_tensorbeat_datalake_proto_rawDescData = file_tensorbeat_datalake_proto_rawDesc
)

func file_tensorbeat_datalake_proto_rawDescGZIP() []byte {
	file_tensorbeat_datalake_proto_rawDescOnce.Do(func() {
		file_tensorbeat_datalake_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorbeat_datalake_proto_rawDescData)
	})
	return file_tensorbeat_datalake_proto_rawDescData
}

var file_tensorbeat_datalake_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tensorbeat_datalake_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_tensorbeat_datalake_proto_goTypes = []interface{}{
	(LogicalOperator)(0),       // 0: tensorbeat.datalake.LogicalOperator
	(*GetSongsRequest)(nil),    // 1: tensorbeat.datalake.GetSongsRequest
	(*GetSongsResponse)(nil),   // 2: tensorbeat.datalake.GetSongsResponse
	(*AddSongsRequest)(nil),    // 3: tensorbeat.datalake.AddSongsRequest
	(*AddSongsResponse)(nil),   // 4: tensorbeat.datalake.AddSongsResponse
	(*AddTagsRequest)(nil),     // 5: tensorbeat.datalake.AddTagsRequest
	(*AddTagsResponse)(nil),    // 6: tensorbeat.datalake.AddTagsResponse
	(*RemoveTagsRequest)(nil),  // 7: tensorbeat.datalake.RemoveTagsRequest
	(*RemoveTagsResponse)(nil), // 8: tensorbeat.datalake.RemoveTagsResponse
	nil,                        // 9: tensorbeat.datalake.GetSongsRequest.TagsEntry
	nil,                        // 10: tensorbeat.datalake.AddTagsRequest.TagsEntry
	nil,                        // 11: tensorbeat.datalake.RemoveTagsRequest.TagsEntry
	(*File)(nil),               // 12: tensorbeat.common.File
	(*AddFile)(nil),            // 13: tensorbeat.common.AddFile
}
var file_tensorbeat_datalake_proto_depIdxs = []int32{
	9,  // 0: tensorbeat.datalake.GetSongsRequest.tags:type_name -> tensorbeat.datalake.GetSongsRequest.TagsEntry
	0,  // 1: tensorbeat.datalake.GetSongsRequest.operator:type_name -> tensorbeat.datalake.LogicalOperator
	12, // 2: tensorbeat.datalake.GetSongsResponse.songs:type_name -> tensorbeat.common.File
	13, // 3: tensorbeat.datalake.AddSongsRequest.songs:type_name -> tensorbeat.common.AddFile
	10, // 4: tensorbeat.datalake.AddTagsRequest.tags:type_name -> tensorbeat.datalake.AddTagsRequest.TagsEntry
	11, // 5: tensorbeat.datalake.RemoveTagsRequest.tags:type_name -> tensorbeat.datalake.RemoveTagsRequest.TagsEntry
	1,  // 6: tensorbeat.datalake.DatalakeService.GetSongs:input_type -> tensorbeat.datalake.GetSongsRequest
	3,  // 7: tensorbeat.datalake.DatalakeService.AddSongs:input_type -> tensorbeat.datalake.AddSongsRequest
	5,  // 8: tensorbeat.datalake.DatalakeService.AddTags:input_type -> tensorbeat.datalake.AddTagsRequest
	7,  // 9: tensorbeat.datalake.DatalakeService.RemoveTags:input_type -> tensorbeat.datalake.RemoveTagsRequest
	2,  // 10: tensorbeat.datalake.DatalakeService.GetSongs:output_type -> tensorbeat.datalake.GetSongsResponse
	4,  // 11: tensorbeat.datalake.DatalakeService.AddSongs:output_type -> tensorbeat.datalake.AddSongsResponse
	6,  // 12: tensorbeat.datalake.DatalakeService.AddTags:output_type -> tensorbeat.datalake.AddTagsResponse
	8,  // 13: tensorbeat.datalake.DatalakeService.RemoveTags:output_type -> tensorbeat.datalake.RemoveTagsResponse
	10, // [10:14] is the sub-list for method output_type
	6,  // [6:10] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_tensorbeat_datalake_proto_init() }
func file_tensorbeat_datalake_proto_init() {
	if File_tensorbeat_datalake_proto != nil {
		return
	}
	file_tensorbeat_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tensorbeat_datalake_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSongsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorbeat_datalake_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSongsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorbeat_datalake_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSongsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorbeat_datalake_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSongsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorbeat_datalake_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorbeat_datalake_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorbeat_datalake_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorbeat_datalake_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorbeat_datalake_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tensorbeat_datalake_proto_goTypes,
		DependencyIndexes: file_tensorbeat_datalake_proto_depIdxs,
		EnumInfos:         file_tensorbeat_datalake_proto_enumTypes,
		MessageInfos:      file_tensorbeat_datalake_proto_msgTypes,
	}.Build()
	File_tensorbeat_datalake_proto = out.File
	file_tensorbeat_datalake_proto_rawDesc = nil
	file_tensorbeat_datalake_proto_goTypes = nil
	file_tensorbeat_datalake_proto_depIdxs = nil
}
