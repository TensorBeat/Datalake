// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: tensorbeat/datalake.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Filter int32

const (
	Filter_ANY  Filter = 0
	Filter_ALL  Filter = 1
	Filter_NONE Filter = 2
)

// Enum value maps for Filter.
var (
	Filter_name = map[int32]string{
		0: "ANY",
		1: "ALL",
		2: "NONE",
	}
	Filter_value = map[string]int32{
		"ANY":  0,
		"ALL":  1,
		"NONE": 2,
	}
)

func (x Filter) Enum() *Filter {
	p := new(Filter)
	*p = x
	return p
}

func (x Filter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Filter) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorbeat_datalake_proto_enumTypes[0].Descriptor()
}

func (Filter) Type() protoreflect.EnumType {
	return &file_tensorbeat_datalake_proto_enumTypes[0]
}

func (x Filter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Filter.Descriptor instead.
func (Filter) EnumDescriptor() ([]byte, []int) {
	return file_tensorbeat_datalake_proto_rawDescGZIP(), []int{0}
}

type GetSongsByTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// Pass in map of tags to be matched on returned songs
	// EX:
	// {
	// "genre": "rock",
	// "spectrogram_id": "*",
	// }
	// The tags will be combined using the filter:
	// - ANY   means songs matching any of the tags will be returned.
	// - ALL   means songs matching all of the tags will be returned.
	// - NONE  means songs that dont match any of the tags will be returned.
	//
	// Using an * for the value will return any song with that tag set.
	// Using a specific value for the tag will return only songs with that exact combination of Key/Value
	//
	Tags      map[string]string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Filter    Filter            `protobuf:"varint,2,opt,name=filter,proto3,enum=tensorbeat.datalake.Filter" json:"filter,omitempty"`
	PageToken *int64            `protobuf:"varint,3,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	PageSize  *int64            `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
}

func (x *GetSongsByTagsRequest) Reset() {
	*x = GetSongsByTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorbeat_datalake_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSongsByTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSongsByTagsRequest) ProtoMessage() {}

func (x *GetSongsByTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorbeat_datalake_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSongsByTagsRequest.ProtoReflect.Descriptor instead.
func (*GetSongsByTagsRequest) Descriptor() ([]byte, []int) {
	return file_tensorbeat_datalake_proto_rawDescGZIP(), []int{0}
}

func (x *GetSongsByTagsRequest) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GetSongsByTagsRequest) GetFilter() Filter {
	if x != nil {
		return x.Filter
	}
	return Filter_ANY
}

func (x *GetSongsByTagsRequest) GetPageToken() int64 {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return 0
}

func (x *GetSongsByTagsRequest) GetPageSize() int64 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

type GetSongsByTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Songs         []*File `protobuf:"bytes,1,rep,name=songs,proto3" json:"songs,omitempty"`
	NextPageToken int64   `protobuf:"varint,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *GetSongsByTagsResponse) Reset() {
	*x = GetSongsByTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorbeat_datalake_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSongsByTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSongsByTagsResponse) ProtoMessage() {}

func (x *GetSongsByTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorbeat_datalake_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSongsByTagsResponse.ProtoReflect.Descriptor instead.
func (*GetSongsByTagsResponse) Descriptor() ([]byte, []int) {
	return file_tensorbeat_datalake_proto_rawDescGZIP(), []int{1}
}

func (x *GetSongsByTagsResponse) GetSongs() []*File {
	if x != nil {
		return x.Songs
	}
	return nil
}

func (x *GetSongsByTagsResponse) GetNextPageToken() int64 {
	if x != nil {
		return x.NextPageToken
	}
	return 0
}

type AddSongsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Songs []*AddFile `protobuf:"bytes,1,rep,name=songs,proto3" json:"songs,omitempty"`
}

func (x *AddSongsRequest) Reset() {
	*x = AddSongsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorbeat_datalake_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSongsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSongsRequest) ProtoMessage() {}

func (x *AddSongsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorbeat_datalake_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSongsRequest.ProtoReflect.Descriptor instead.
func (*AddSongsRequest) Descriptor() ([]byte, []int) {
	return file_tensorbeat_datalake_proto_rawDescGZIP(), []int{2}
}

func (x *AddSongsRequest) GetSongs() []*AddFile {
	if x != nil {
		return x.Songs
	}
	return nil
}

type AddSongsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (x *AddSongsResponse) Reset() {
	*x = AddSongsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorbeat_datalake_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSongsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSongsResponse) ProtoMessage() {}

func (x *AddSongsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorbeat_datalake_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSongsResponse.ProtoReflect.Descriptor instead.
func (*AddSongsResponse) Descriptor() ([]byte, []int) {
	return file_tensorbeat_datalake_proto_rawDescGZIP(), []int{3}
}

func (x *AddSongsResponse) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

type AddTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tags map[string]string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddTagsRequest) Reset() {
	*x = AddTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorbeat_datalake_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTagsRequest) ProtoMessage() {}

func (x *AddTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorbeat_datalake_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTagsRequest.ProtoReflect.Descriptor instead.
func (*AddTagsRequest) Descriptor() ([]byte, []int) {
	return file_tensorbeat_datalake_proto_rawDescGZIP(), []int{4}
}

func (x *AddTagsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddTagsRequest) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type AddTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (x *AddTagsResponse) Reset() {
	*x = AddTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorbeat_datalake_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTagsResponse) ProtoMessage() {}

func (x *AddTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorbeat_datalake_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTagsResponse.ProtoReflect.Descriptor instead.
func (*AddTagsResponse) Descriptor() ([]byte, []int) {
	return file_tensorbeat_datalake_proto_rawDescGZIP(), []int{5}
}

func (x *AddTagsResponse) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

type RemoveTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tags map[string]string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RemoveTagsRequest) Reset() {
	*x = RemoveTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorbeat_datalake_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTagsRequest) ProtoMessage() {}

func (x *RemoveTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorbeat_datalake_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTagsRequest.ProtoReflect.Descriptor instead.
func (*RemoveTagsRequest) Descriptor() ([]byte, []int) {
	return file_tensorbeat_datalake_proto_rawDescGZIP(), []int{6}
}

func (x *RemoveTagsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RemoveTagsRequest) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type RemoveTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (x *RemoveTagsResponse) Reset() {
	*x = RemoveTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorbeat_datalake_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTagsResponse) ProtoMessage() {}

func (x *RemoveTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorbeat_datalake_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTagsResponse.ProtoReflect.Descriptor instead.
func (*RemoveTagsResponse) Descriptor() ([]byte, []int) {
	return file_tensorbeat_datalake_proto_rawDescGZIP(), []int{7}
}

func (x *RemoveTagsResponse) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

type GetAllSongsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageToken *int64 `protobuf:"varint,1,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	PageSize  *int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
}

func (x *GetAllSongsRequest) Reset() {
	*x = GetAllSongsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorbeat_datalake_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllSongsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllSongsRequest) ProtoMessage() {}

func (x *GetAllSongsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorbeat_datalake_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllSongsRequest.ProtoReflect.Descriptor instead.
func (*GetAllSongsRequest) Descriptor() ([]byte, []int) {
	return file_tensorbeat_datalake_proto_rawDescGZIP(), []int{8}
}

func (x *GetAllSongsRequest) GetPageToken() int64 {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return 0
}

func (x *GetAllSongsRequest) GetPageSize() int64 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

type GetAllSongsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Songs         []*File `protobuf:"bytes,1,rep,name=songs,proto3" json:"songs,omitempty"`
	NextPageToken int64   `protobuf:"varint,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *GetAllSongsResponse) Reset() {
	*x = GetAllSongsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorbeat_datalake_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllSongsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllSongsResponse) ProtoMessage() {}

func (x *GetAllSongsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorbeat_datalake_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllSongsResponse.ProtoReflect.Descriptor instead.
func (*GetAllSongsResponse) Descriptor() ([]byte, []int) {
	return file_tensorbeat_datalake_proto_rawDescGZIP(), []int{9}
}

func (x *GetAllSongsResponse) GetSongs() []*File {
	if x != nil {
		return x.Songs
	}
	return nil
}

func (x *GetAllSongsResponse) GetNextPageToken() int64 {
	if x != nil {
		return x.NextPageToken
	}
	return 0
}

type GetSongsByIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids       []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	PageToken *int64   `protobuf:"varint,2,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	PageSize  *int64   `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
}

func (x *GetSongsByIDsRequest) Reset() {
	*x = GetSongsByIDsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorbeat_datalake_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSongsByIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSongsByIDsRequest) ProtoMessage() {}

func (x *GetSongsByIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorbeat_datalake_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSongsByIDsRequest.ProtoReflect.Descriptor instead.
func (*GetSongsByIDsRequest) Descriptor() ([]byte, []int) {
	return file_tensorbeat_datalake_proto_rawDescGZIP(), []int{10}
}

func (x *GetSongsByIDsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *GetSongsByIDsRequest) GetPageToken() int64 {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return 0
}

func (x *GetSongsByIDsRequest) GetPageSize() int64 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

type GetSongsByIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Songs         []*File `protobuf:"bytes,1,rep,name=songs,proto3" json:"songs,omitempty"`
	NextPageToken int64   `protobuf:"varint,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *GetSongsByIDsResponse) Reset() {
	*x = GetSongsByIDsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorbeat_datalake_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSongsByIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSongsByIDsResponse) ProtoMessage() {}

func (x *GetSongsByIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorbeat_datalake_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSongsByIDsResponse.ProtoReflect.Descriptor instead.
func (*GetSongsByIDsResponse) Descriptor() ([]byte, []int) {
	return file_tensorbeat_datalake_proto_rawDescGZIP(), []int{11}
}

func (x *GetSongsByIDsResponse) GetSongs() []*File {
	if x != nil {
		return x.Songs
	}
	return nil
}

func (x *GetSongsByIDsResponse) GetNextPageToken() int64 {
	if x != nil {
		return x.NextPageToken
	}
	return 0
}

var File_tensorbeat_datalake_proto protoreflect.FileDescriptor

var file_tensorbeat_datalake_proto_rawDesc = []byte{
	0x0a, 0x19, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6c, 0x61, 0x6b, 0x65,
	0x1a, 0x17, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb2, 0x02, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x53, 0x6f, 0x6e, 0x67, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6e, 0x67, 0x73,
	0x42, 0x79, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x33, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6c,
	0x61, 0x6b, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x6f,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6e, 0x67, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x6f, 0x6e, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x62, 0x65, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x05, 0x73, 0x6f, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x43, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x53, 0x6f, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x6f, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x73,
	0x6f, 0x6e, 0x67, 0x73, 0x22, 0x32, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x53, 0x6f, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x22, 0x9c, 0x01, 0x0a, 0x0e, 0x41, 0x64, 0x64,
	0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6c, 0x61, 0x6b, 0x65, 0x2e,
	0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37,
	0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x31, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x54, 0x61,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x22, 0xa2, 0x01, 0x0a, 0x11, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x44, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x34, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x66, 0x75, 0x6c, 0x22, 0x77, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53,
	0x6f, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x6c,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x6f, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x6f, 0x6e, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61,
	0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x73,
	0x6f, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8b, 0x01, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6e, 0x67, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x6e, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x53, 0x6f, 0x6e, 0x67, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x6f, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x6f, 0x6e,
	0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2a, 0x24, 0x0a, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x02,
	0x32, 0xd4, 0x04, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x6c, 0x61, 0x6b, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x60, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x6f,
	0x6e, 0x67, 0x73, 0x12, 0x27, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x53, 0x6f, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6c, 0x61,
	0x6b, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x6f, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6e,
	0x67, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x12, 0x29, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x62, 0x65, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x6f, 0x6e, 0x67, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6e, 0x67,
	0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6e, 0x67, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x2a, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6e, 0x67, 0x73, 0x42,
	0x79, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6c, 0x61,
	0x6b, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6e, 0x67, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x08, 0x41, 0x64, 0x64,
	0x53, 0x6f, 0x6e, 0x67, 0x73, 0x12, 0x24, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65,
	0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x53,
	0x6f, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6c, 0x61, 0x6b,
	0x65, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x6f, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x54, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x73, 0x12, 0x23, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6c,
	0x61, 0x6b, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x26, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62,
	0x65, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tensorbeat_datalake_proto_rawDescOnce sync.Once
	file_tensorbeat_datalake_proto_rawDescData = file_tensorbeat_datalake_proto_rawDesc
)

func file_tensorbeat_datalake_proto_rawDescGZIP() []byte {
	file_tensorbeat_datalake_proto_rawDescOnce.Do(func() {
		file_tensorbeat_datalake_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorbeat_datalake_proto_rawDescData)
	})
	return file_tensorbeat_datalake_proto_rawDescData
}

var file_tensorbeat_datalake_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tensorbeat_datalake_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_tensorbeat_datalake_proto_goTypes = []interface{}{
	(Filter)(0),                    // 0: tensorbeat.datalake.Filter
	(*GetSongsByTagsRequest)(nil),  // 1: tensorbeat.datalake.GetSongsByTagsRequest
	(*GetSongsByTagsResponse)(nil), // 2: tensorbeat.datalake.GetSongsByTagsResponse
	(*AddSongsRequest)(nil),        // 3: tensorbeat.datalake.AddSongsRequest
	(*AddSongsResponse)(nil),       // 4: tensorbeat.datalake.AddSongsResponse
	(*AddTagsRequest)(nil),         // 5: tensorbeat.datalake.AddTagsRequest
	(*AddTagsResponse)(nil),        // 6: tensorbeat.datalake.AddTagsResponse
	(*RemoveTagsRequest)(nil),      // 7: tensorbeat.datalake.RemoveTagsRequest
	(*RemoveTagsResponse)(nil),     // 8: tensorbeat.datalake.RemoveTagsResponse
	(*GetAllSongsRequest)(nil),     // 9: tensorbeat.datalake.GetAllSongsRequest
	(*GetAllSongsResponse)(nil),    // 10: tensorbeat.datalake.GetAllSongsResponse
	(*GetSongsByIDsRequest)(nil),   // 11: tensorbeat.datalake.GetSongsByIDsRequest
	(*GetSongsByIDsResponse)(nil),  // 12: tensorbeat.datalake.GetSongsByIDsResponse
	nil,                            // 13: tensorbeat.datalake.GetSongsByTagsRequest.TagsEntry
	nil,                            // 14: tensorbeat.datalake.AddTagsRequest.TagsEntry
	nil,                            // 15: tensorbeat.datalake.RemoveTagsRequest.TagsEntry
	(*File)(nil),                   // 16: tensorbeat.common.File
	(*AddFile)(nil),                // 17: tensorbeat.common.AddFile
}
var file_tensorbeat_datalake_proto_depIdxs = []int32{
	13, // 0: tensorbeat.datalake.GetSongsByTagsRequest.tags:type_name -> tensorbeat.datalake.GetSongsByTagsRequest.TagsEntry
	0,  // 1: tensorbeat.datalake.GetSongsByTagsRequest.filter:type_name -> tensorbeat.datalake.Filter
	16, // 2: tensorbeat.datalake.GetSongsByTagsResponse.songs:type_name -> tensorbeat.common.File
	17, // 3: tensorbeat.datalake.AddSongsRequest.songs:type_name -> tensorbeat.common.AddFile
	14, // 4: tensorbeat.datalake.AddTagsRequest.tags:type_name -> tensorbeat.datalake.AddTagsRequest.TagsEntry
	15, // 5: tensorbeat.datalake.RemoveTagsRequest.tags:type_name -> tensorbeat.datalake.RemoveTagsRequest.TagsEntry
	16, // 6: tensorbeat.datalake.GetAllSongsResponse.songs:type_name -> tensorbeat.common.File
	16, // 7: tensorbeat.datalake.GetSongsByIDsResponse.songs:type_name -> tensorbeat.common.File
	9,  // 8: tensorbeat.datalake.DatalakeService.GetAllSongs:input_type -> tensorbeat.datalake.GetAllSongsRequest
	11, // 9: tensorbeat.datalake.DatalakeService.GetSongsByIDs:input_type -> tensorbeat.datalake.GetSongsByIDsRequest
	1,  // 10: tensorbeat.datalake.DatalakeService.GetSongsByTags:input_type -> tensorbeat.datalake.GetSongsByTagsRequest
	3,  // 11: tensorbeat.datalake.DatalakeService.AddSongs:input_type -> tensorbeat.datalake.AddSongsRequest
	5,  // 12: tensorbeat.datalake.DatalakeService.AddTags:input_type -> tensorbeat.datalake.AddTagsRequest
	7,  // 13: tensorbeat.datalake.DatalakeService.RemoveTags:input_type -> tensorbeat.datalake.RemoveTagsRequest
	10, // 14: tensorbeat.datalake.DatalakeService.GetAllSongs:output_type -> tensorbeat.datalake.GetAllSongsResponse
	12, // 15: tensorbeat.datalake.DatalakeService.GetSongsByIDs:output_type -> tensorbeat.datalake.GetSongsByIDsResponse
	2,  // 16: tensorbeat.datalake.DatalakeService.GetSongsByTags:output_type -> tensorbeat.datalake.GetSongsByTagsResponse
	4,  // 17: tensorbeat.datalake.DatalakeService.AddSongs:output_type -> tensorbeat.datalake.AddSongsResponse
	6,  // 18: tensorbeat.datalake.DatalakeService.AddTags:output_type -> tensorbeat.datalake.AddTagsResponse
	8,  // 19: tensorbeat.datalake.DatalakeService.RemoveTags:output_type -> tensorbeat.datalake.RemoveTagsResponse
	14, // [14:20] is the sub-list for method output_type
	8,  // [8:14] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_tensorbeat_datalake_proto_init() }
func file_tensorbeat_datalake_proto_init() {
	if File_tensorbeat_datalake_proto != nil {
		return
	}
	file_tensorbeat_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tensorbeat_datalake_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSongsByTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorbeat_datalake_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSongsByTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorbeat_datalake_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSongsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorbeat_datalake_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSongsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorbeat_datalake_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorbeat_datalake_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorbeat_datalake_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorbeat_datalake_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorbeat_datalake_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllSongsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorbeat_datalake_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllSongsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorbeat_datalake_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSongsByIDsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorbeat_datalake_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSongsByIDsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tensorbeat_datalake_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_tensorbeat_datalake_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_tensorbeat_datalake_proto_msgTypes[10].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorbeat_datalake_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tensorbeat_datalake_proto_goTypes,
		DependencyIndexes: file_tensorbeat_datalake_proto_depIdxs,
		EnumInfos:         file_tensorbeat_datalake_proto_enumTypes,
		MessageInfos:      file_tensorbeat_datalake_proto_msgTypes,
	}.Build()
	File_tensorbeat_datalake_proto = out.File
	file_tensorbeat_datalake_proto_rawDesc = nil
	file_tensorbeat_datalake_proto_goTypes = nil
	file_tensorbeat_datalake_proto_depIdxs = nil
}
