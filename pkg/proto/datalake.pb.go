// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: tensorbeat/datalake.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetSongsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//Pass in map of metadata to be matched on returned songs
	//{
	//"genre": "rock",
	//"genre": "metal",
	//}
	//These should be "ORed" so if song matches any of the metadata it is returned
	Metadata map[string]string `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSongsRequest) Reset() {
	*x = GetSongsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorbeat_datalake_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSongsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSongsRequest) ProtoMessage() {}

func (x *GetSongsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorbeat_datalake_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSongsRequest.ProtoReflect.Descriptor instead.
func (*GetSongsRequest) Descriptor() ([]byte, []int) {
	return file_tensorbeat_datalake_proto_rawDescGZIP(), []int{0}
}

func (x *GetSongsRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GetSongsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Songs []*File `protobuf:"bytes,1,rep,name=songs,proto3" json:"songs,omitempty"`
}

func (x *GetSongsResponse) Reset() {
	*x = GetSongsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorbeat_datalake_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSongsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSongsResponse) ProtoMessage() {}

func (x *GetSongsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorbeat_datalake_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSongsResponse.ProtoReflect.Descriptor instead.
func (*GetSongsResponse) Descriptor() ([]byte, []int) {
	return file_tensorbeat_datalake_proto_rawDescGZIP(), []int{1}
}

func (x *GetSongsResponse) GetSongs() []*File {
	if x != nil {
		return x.Songs
	}
	return nil
}

type AddSongsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Songs []*File `protobuf:"bytes,1,rep,name=songs,proto3" json:"songs,omitempty"`
}

func (x *AddSongsRequest) Reset() {
	*x = AddSongsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorbeat_datalake_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSongsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSongsRequest) ProtoMessage() {}

func (x *AddSongsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorbeat_datalake_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSongsRequest.ProtoReflect.Descriptor instead.
func (*AddSongsRequest) Descriptor() ([]byte, []int) {
	return file_tensorbeat_datalake_proto_rawDescGZIP(), []int{2}
}

func (x *AddSongsRequest) GetSongs() []*File {
	if x != nil {
		return x.Songs
	}
	return nil
}

type AddSongsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (x *AddSongsResponse) Reset() {
	*x = AddSongsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorbeat_datalake_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSongsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSongsResponse) ProtoMessage() {}

func (x *AddSongsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorbeat_datalake_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSongsResponse.ProtoReflect.Descriptor instead.
func (*AddSongsResponse) Descriptor() ([]byte, []int) {
	return file_tensorbeat_datalake_proto_rawDescGZIP(), []int{3}
}

func (x *AddSongsResponse) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

var File_tensorbeat_datalake_proto protoreflect.FileDescriptor

var file_tensorbeat_datalake_proto_rawDesc = []byte{
	0x0a, 0x19, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6c, 0x61, 0x6b, 0x65,
	0x1a, 0x17, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x01, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x53, 0x6f, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a,
	0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x41, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x53, 0x6f, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d,
	0x0a, 0x05, 0x73, 0x6f, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x6f, 0x6e, 0x67, 0x73, 0x22, 0x40, 0x0a,
	0x0f, 0x41, 0x64, 0x64, 0x53, 0x6f, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2d, 0x0a, 0x05, 0x73, 0x6f, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x6f, 0x6e, 0x67, 0x73, 0x22,
	0x32, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x53, 0x6f, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x32, 0xc3, 0x01, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x6c, 0x61, 0x6b, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x6f,
	0x6e, 0x67, 0x73, 0x12, 0x24, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6c, 0x61, 0x6b, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x6f, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x57, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x53, 0x6f, 0x6e, 0x67, 0x73, 0x12, 0x24, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6c, 0x61,
	0x6b, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x6f, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x61, 0x74, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x6f, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_tensorbeat_datalake_proto_rawDescOnce sync.Once
	file_tensorbeat_datalake_proto_rawDescData = file_tensorbeat_datalake_proto_rawDesc
)

func file_tensorbeat_datalake_proto_rawDescGZIP() []byte {
	file_tensorbeat_datalake_proto_rawDescOnce.Do(func() {
		file_tensorbeat_datalake_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorbeat_datalake_proto_rawDescData)
	})
	return file_tensorbeat_datalake_proto_rawDescData
}

var file_tensorbeat_datalake_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_tensorbeat_datalake_proto_goTypes = []interface{}{
	(*GetSongsRequest)(nil),  // 0: tensorbeat.datalake.GetSongsRequest
	(*GetSongsResponse)(nil), // 1: tensorbeat.datalake.GetSongsResponse
	(*AddSongsRequest)(nil),  // 2: tensorbeat.datalake.AddSongsRequest
	(*AddSongsResponse)(nil), // 3: tensorbeat.datalake.AddSongsResponse
	nil,                      // 4: tensorbeat.datalake.GetSongsRequest.MetadataEntry
	(*File)(nil),             // 5: tensorbeat.common.File
}
var file_tensorbeat_datalake_proto_depIdxs = []int32{
	4, // 0: tensorbeat.datalake.GetSongsRequest.metadata:type_name -> tensorbeat.datalake.GetSongsRequest.MetadataEntry
	5, // 1: tensorbeat.datalake.GetSongsResponse.songs:type_name -> tensorbeat.common.File
	5, // 2: tensorbeat.datalake.AddSongsRequest.songs:type_name -> tensorbeat.common.File
	0, // 3: tensorbeat.datalake.DatalakeService.GetSongs:input_type -> tensorbeat.datalake.GetSongsRequest
	2, // 4: tensorbeat.datalake.DatalakeService.AddSongs:input_type -> tensorbeat.datalake.AddSongsRequest
	1, // 5: tensorbeat.datalake.DatalakeService.GetSongs:output_type -> tensorbeat.datalake.GetSongsResponse
	3, // 6: tensorbeat.datalake.DatalakeService.AddSongs:output_type -> tensorbeat.datalake.AddSongsResponse
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_tensorbeat_datalake_proto_init() }
func file_tensorbeat_datalake_proto_init() {
	if File_tensorbeat_datalake_proto != nil {
		return
	}
	file_tensorbeat_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tensorbeat_datalake_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSongsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorbeat_datalake_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSongsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorbeat_datalake_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSongsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorbeat_datalake_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSongsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorbeat_datalake_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tensorbeat_datalake_proto_goTypes,
		DependencyIndexes: file_tensorbeat_datalake_proto_depIdxs,
		MessageInfos:      file_tensorbeat_datalake_proto_msgTypes,
	}.Build()
	File_tensorbeat_datalake_proto = out.File
	file_tensorbeat_datalake_proto_rawDesc = nil
	file_tensorbeat_datalake_proto_goTypes = nil
	file_tensorbeat_datalake_proto_depIdxs = nil
}
