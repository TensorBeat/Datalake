// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatalakeServiceClient is the client API for DatalakeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatalakeServiceClient interface {
	GetSongs(ctx context.Context, in *GetSongsRequest, opts ...grpc.CallOption) (*GetSongsResponse, error)
	AddSongs(ctx context.Context, in *AddSongsRequest, opts ...grpc.CallOption) (*AddSongsResponse, error)
}

type datalakeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatalakeServiceClient(cc grpc.ClientConnInterface) DatalakeServiceClient {
	return &datalakeServiceClient{cc}
}

func (c *datalakeServiceClient) GetSongs(ctx context.Context, in *GetSongsRequest, opts ...grpc.CallOption) (*GetSongsResponse, error) {
	out := new(GetSongsResponse)
	err := c.cc.Invoke(ctx, "/tensorbeat.datalake.DatalakeService/GetSongs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datalakeServiceClient) AddSongs(ctx context.Context, in *AddSongsRequest, opts ...grpc.CallOption) (*AddSongsResponse, error) {
	out := new(AddSongsResponse)
	err := c.cc.Invoke(ctx, "/tensorbeat.datalake.DatalakeService/AddSongs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatalakeServiceServer is the server API for DatalakeService service.
// All implementations must embed UnimplementedDatalakeServiceServer
// for forward compatibility
type DatalakeServiceServer interface {
	GetSongs(context.Context, *GetSongsRequest) (*GetSongsResponse, error)
	AddSongs(context.Context, *AddSongsRequest) (*AddSongsResponse, error)
	mustEmbedUnimplementedDatalakeServiceServer()
}

// UnimplementedDatalakeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDatalakeServiceServer struct {
}

func (UnimplementedDatalakeServiceServer) GetSongs(context.Context, *GetSongsRequest) (*GetSongsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSongs not implemented")
}
func (UnimplementedDatalakeServiceServer) AddSongs(context.Context, *AddSongsRequest) (*AddSongsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSongs not implemented")
}
func (UnimplementedDatalakeServiceServer) mustEmbedUnimplementedDatalakeServiceServer() {}

// UnsafeDatalakeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatalakeServiceServer will
// result in compilation errors.
type UnsafeDatalakeServiceServer interface {
	mustEmbedUnimplementedDatalakeServiceServer()
}

func RegisterDatalakeServiceServer(s grpc.ServiceRegistrar, srv DatalakeServiceServer) {
	s.RegisterService(&DatalakeService_ServiceDesc, srv)
}

func _DatalakeService_GetSongs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSongsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatalakeServiceServer).GetSongs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorbeat.datalake.DatalakeService/GetSongs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatalakeServiceServer).GetSongs(ctx, req.(*GetSongsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatalakeService_AddSongs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSongsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatalakeServiceServer).AddSongs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorbeat.datalake.DatalakeService/AddSongs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatalakeServiceServer).AddSongs(ctx, req.(*AddSongsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatalakeService_ServiceDesc is the grpc.ServiceDesc for DatalakeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatalakeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tensorbeat.datalake.DatalakeService",
	HandlerType: (*DatalakeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSongs",
			Handler:    _DatalakeService_GetSongs_Handler,
		},
		{
			MethodName: "AddSongs",
			Handler:    _DatalakeService_AddSongs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tensorbeat/datalake.proto",
}
